// 使用 IIFE (Immediately Invoked Function Expression) 封装代码，防止全局变量污染
var LazyLoad = (function() {
  "use strict"; // 严格模式，提高代码安全性

  // 判断是否在浏览器环境中执行
  const isBrowser = typeof window !== "undefined";

  // 判断是否为低功能设备（如爬虫等）
  const isBot = isBrowser && (
      !("onscroll" in window) ||
      typeof navigator !== "undefined" &&
      /(gle|ing|ro)bot|crawl|spider/i.test(navigator.userAgent)
  );

  // 判断是否为高分辨率设备
  const isHighDPI = isBrowser && window.devicePixelRatio > 1;

  // 默认配置
  const defaultSettings = {
      elements_selector: ".lazy",      // 要懒加载的元素选择器
      container: isBot || isBrowser ? document : null, // 滚动容器
      threshold: 300,                 // 触发加载的阈值
      data_src: "src",                // 数据源属性名称
      data_srcset: "srcset",          // 图片 srcset 属性
      data_sizes: "sizes",            // 图片 sizes 属性
      class_applied: "applied",       // 应用加载后的类名
      class_loading: "loading",       // 正在加载的类名
      class_loaded: "loaded",         // 加载完成的类名
      class_error: "error",           // 加载错误的类名
      unobserve_completed: true,      // 是否在加载完成后停止观察
      use_native: false,              // 是否使用原生浏览器懒加载支持
  };

  // 合并用户设置和默认设置
  const mergeSettings = (userSettings) => Object.assign({}, defaultSettings, userSettings);

  // 向外界发送 LazyLoad 初始化事件
  const triggerEvent = function(instance, name) {
      let event;
      const eventName = `LazyLoad::${name}`;
      try {
          event = new CustomEvent(eventName, { detail: { instance } });
      } catch (e) {
          event = document.createEvent("CustomEvent");
          event.initCustomEvent(eventName, false, false, { instance });
      }
      window.dispatchEvent(event);
  };

  // 用于处理图片的各种属性
  const setImageSrcAttributes = (element, settings) => {
      const src = element.getAttribute(settings.data_src);
      const srcset = element.getAttribute(settings.data_srcset);
      const sizes = element.getAttribute(settings.data_sizes);

      if (sizes) element.setAttribute("sizes", sizes);
      if (srcset) element.setAttribute("srcset", srcset);
      if (src) element.setAttribute("src", src);
  };

  // 处理每个懒加载元素
  const loadElement = (element, settings, instance) => {
      // 如果是图片，处理其 src, srcset 等属性
      if (element.tagName === "IMG") {
          setImageSrcAttributes(element, settings);
      }

      // 添加加载中的 class
      element.classList.add(settings.class_loading);

      // 处理加载完成和错误的事件
      element.addEventListener("load", function() {
          element.classList.remove(settings.class_loading);
          element.classList.add(settings.class_loaded);
          // 如果配置了 unobserve_completed，停止观察该元素
          if (settings.unobserve_completed && instance) {
              instance.unobserve(element);
          }
      });

      element.addEventListener("error", function() {
          element.classList.remove(settings.class_loading);
          element.classList.add(settings.class_error);
      });
  };

  // 构造函数，创建 LazyLoad 实例
  function LazyLoad(userSettings) {
      this.settings = mergeSettings(userSettings);
      this.observer = null;
      this.init();
      triggerEvent(this, "Initialized");
  }

  // 初始化 LazyLoad
  LazyLoad.prototype.init = function() {
      if (isBot || !window.IntersectionObserver) {
          // 如果是爬虫或不支持 IntersectionObserver，则直接加载所有元素
          this.loadAll();
      } else {
          // 启动 IntersectionObserver 进行懒加载
          this.observer = new IntersectionObserver((entries) => {
              entries.forEach((entry) => {
                  if (entry.isIntersecting) {
                      const element = entry.target;
                      loadElement(element, this.settings, this);
                      this.observer.unobserve(element); // 加载完成后停止观察
                  }
              });
          }, {
              root: this.settings.container === document ? null : this.settings.container,
              rootMargin: `${this.settings.threshold}px`,
          });

          // 开始观察所有懒加载元素
          this.observeAll();
      }
  };

  // 加载所有元素（无观察）
  LazyLoad.prototype.loadAll = function() {
      const elements = document.querySelectorAll(this.settings.elements_selector);
      elements.forEach((element) => loadElement(element, this.settings));
  };

  // 开始观察所有懒加载元素
  LazyLoad.prototype.observeAll = function() {
      const elements = document.querySelectorAll(this.settings.elements_selector);
      elements.forEach((element) => {
          this.observer.observe(element);
      });
  };

  // 停止观察指定元素
  LazyLoad.prototype.unobserve = function(element) {
      if (this.observer) {
          this.observer.unobserve(element);
      }
  };

  // 销毁 LazyLoad 实例
  LazyLoad.prototype.destroy = function() {
      if (this.observer) {
          this.observer.disconnect();
      }
      this.observer = null;
  };

  return LazyLoad; // 返回 LazyLoad 构造函数，供外界使用
})();

